MODEL:
  CRPNET_ON: True
  META_ARCHITECTURE: "CRPNet"
  BACKBONE:
    NAME: "build_crpnet_resneth_fpn_backbone"
  RESNETH:
    OUT_FEATURES: ["res3", "res4", "res5"]
  ANCHOR_GENERATOR:
    SIZES: !!python/object/apply:eval ["[[x, x * 2**(1.0/3), x * 2**(2.0/3) ] for x in [32, 64, 128, 256, 512 ]]"]
  FPN:
    IN_FEATURES: ["res3", "res4", "res5"]
  CRPNET:
    IOU_THRESHOLDS: [0.4, 0.5]
    IOU_LABELS: [0, -1, 1]
    NUM_CLASSES: 1
    CASCADE_REGRESSION: True
    KPT_WEIGHT: 1.0
    IN_FEATURES: ["p3", "p4", "p5", "p6", "p7"]
    NUM_CONVS: 1
    NUM_KEYPOINTS: 9
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    TOPK_CANDIDATES_TEST: 100
    NMS_THRESH_TEST: 0.5
DATASETS:
  TRAIN: ("linemod_ape_train",)
  TEST: ("linemod_ape_val",)
SOLVER:
  IMS_PER_BATCH: 16
  BASE_LR: 0.01  # Note that RetinaNet uses a different default learning rate
  STEPS: (60000, 80000)
  MAX_ITER: 90000
INPUT:
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  # MASK_FORMAT: "bitmask"
  KEYPOINT_FORMAT: 'bb8'   # 'bb8', 'fps8', 'bb8+fps8'
  RANDOMBLUR:
    ENABLED: True
  COLORJITTER:
    ENABLED: True
TEST:
  EVAL_PERIOD: 0
VERSION: 2
